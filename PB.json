{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"--screen 1\nRefresh_timer = 2 --export: Screen(s) refresh timer in seconds\nsystem.print(\"Refresh timer set to: \"..Refresh_timer..\" seconds\")\n\n--[[\nmetalworks\nelectronics\nglass\nprinter\nchemical\nrefiner\nsmelter\nassembly\n]]\n\n\n\nunit.setTimer(\"refresh\",Refresh_timer)\n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"\nlocal posy = 10\nlocal t_posy = 10\nc=1\n\ncolumn = {10, 215, 420, 625, 830}\nborder = 590 --export: Bottom display line<br>Maximum 600<br>Use to adjust \n\n\n\nindy_column = function(indy, tier, posx, posy)\nif indy[0] == 0 then return \"\" else    \n    stxt = \"\"\n    if tier == 1 then t_color = \"setDefaultFillColor(layer, Shape_Text, 0, 1, 0, 1)\\n\" end\n    if tier == 2 then t_color = \"setDefaultFillColor(layer, Shape_Text,0, 1, 1, 1)\\n\" end\n    if tier == 3 then t_color = \"setDefaultFillColor(layer, Shape_Text,1, .5, 0, 1)\\n\" end\n    if tier == 4 then t_color = \"setDefaultFillColor(layer, Shape_Text,1, 1, 0, 1)\\n\" end\n    \n\n        \n    for index,id in ipairs(indy) do\n        if index<10 then num= \"00\" .. tostring(index) \n         elseif index<100 then num= \"0\" .. tostring(index) \n         else num = tostring(index) end\n         if posy == border then posy=20 c=c+1 end       \n            \n        stxt = stxt ..\"addText(layer, font3, \\\"\" .. num..\"\\\", \".. column[c] .. \",\" .. posy ..\")\\n\" .. f_state(id,1) .. \"addText(layer, font3,\\\"\" .. f_state(id,0).. \"\\\" , \" .. column[c] + 20 .. \",\" .. posy .. \")\\n\"\n        posy = posy +10\n    end\n\n    t_posy = posy\n    return t_color .. stxt .. \" c=\" .. c ..\"\\n\"\nend\nend        \n\n\nscreen_one = [[\nlocal layer = createLayer()\nlocal rx, ry = getResolution()\n\nlocal font = loadFont(\"Oxanium\", 12)\nlocal font3 = loadFont(\"RobotoCondensed\", 11)\n\nlocal column = {10, 215, 420, 625, 830}\n\nsetDefaultFillColor(layer, Shape_Text, 0,0,1,1)\nsetDefaultStrokeColor(layer, Shape_Line, 0,.3,2,1)\nsetDefaultStrokeColor(layer, Shape_BoxRounded, 0,.3,2,1)\n\nsetNextFillColor(layer, 0,0,0,0)\nsetNextStrokeWidth(layer, 1)\naddBoxRounded(layer, 0, 0, rx, ry, 10)\n\nlocal div = rx/5\nlocal posy = 10\n\nlocal header = function(tag, y, p, n)\n    setNextFillColor(layer, 0,0,1,0.2)\n    setNextStrokeWidth(layer, .1)\n    addBoxRounded(layer, p, y, div - 20, 20, 4)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    setNextFillColor(layer, 1,1,1,1)\n    addText(layer, font, \"(\" .. n .. \") \" .. tag, div/2+(p), y+11)    \nend\n\nfor x = 1,5 do addLine (layer, div*x, 0, div*x, ry) end\n\nlocal c = 1\n\nheader(\"Metalwork Industry\", ]].. t_posy ..[[, column[c], ]]..metalwork_all..[[)\n]] .. indy_column(metalwork1,1,column[c],t_posy+40) .. [[\n]] .. indy_column(metalwork2,2,column[c],t_posy) .. [[\n]] .. indy_column(metalwork3,3,column[c],t_posy) .. [[\n]] .. indy_column(metalwork4,4,column[c],t_posy) .. [[\n\nheader(\"Electronics Industry\", ]].. t_posy ..[[, column[c], ]]..electronics_all..[[)\n]] .. indy_column(electronics1,1,column[c],t_posy+40) .. [[\n]] .. indy_column(electronics2,2,column[c],t_posy) .. [[\n]] .. indy_column(electronics3,3,column[c],t_posy) .. [[\n]] .. indy_column(electronics4,4,column[c],t_posy) .. [[\n\n\nheader(\"Glass Industry\", ]].. t_posy ..[[, column[c], ]]..glass_all..[[)\n]] .. indy_column(glass1,1,column[c],t_posy+40) .. [[\n]] .. indy_column(glass2,2,column[c],t_posy) .. [[\n]] .. indy_column(glass3,3,column[c],t_posy) .. [[\n]] .. indy_column(glass4,4,column[c],t_posy) .. [[\n]]\n\nposy = 10\nt_posy = 10\nc=1\n\nscreen_two = [[\nlocal layer = createLayer()\nlocal rx, ry = getResolution()\n\nlocal font = loadFont(\"Oxanium\", 12)\nlocal font3 = loadFont(\"RobotoCondensed\", 11)\n\nlocal column = {10, 215, 420, 625, 830}\n\nsetDefaultFillColor(layer, Shape_Text, 0,0,1,1)\nsetDefaultStrokeColor(layer, Shape_Line, 0,.3,2,1)\nsetDefaultStrokeColor(layer, Shape_BoxRounded, 0,.3,2,1)\n\nsetNextFillColor(layer, 0,0,0,0)\nsetNextStrokeWidth(layer, 1)\naddBoxRounded(layer, 0, 0, rx, ry, 10)\n\nlocal div = rx/5\nlocal posy = 10\n\nlocal header = function(tag, y, p, n)\n    setNextFillColor(layer, 0,0,1,0.2)\n    setNextStrokeWidth(layer, .1)\n    addBoxRounded(layer, p, y, div - 20, 20, 4)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    setNextFillColor(layer, 1,1,1,1)\n    addText(layer, font, \"(\" .. n .. \") \" .. tag, div/2+(p), y+11)    \nend\n\nfor x = 1,5 do addLine (layer, div*x, 0, div*x, ry) end\n\nlocal c = 1\n\nheader(\"3D Printers\", ]].. t_posy ..[[, column[c], ]]..printer_all..[[)\n]] .. indy_column(printer1,1,column[c],t_posy+40) .. [[\n]] .. indy_column(printer2,2,column[c],t_posy) .. [[\n]] .. indy_column(printer3,3,column[c],t_posy) .. [[\n]] .. indy_column(printer4,4,column[c],t_posy) .. [[\n\nheader(\"Chemical Industry\", ]].. t_posy ..[[, column[c], ]]..chemical_all..[[)\n]] .. indy_column(chemical1,1,column[c],t_posy+40) .. [[\n]] .. indy_column(chemical2,2,column[c],t_posy) .. [[\n]] .. indy_column(chemical3,3,column[c],t_posy) .. [[\n]] .. indy_column(chemical4,4,column[c],t_posy) .. [[\n\nheader(\"Refiners\", ]].. t_posy ..[[, column[c], ]]..refiner_all..[[)\n]] .. indy_column(refiner1,1,column[c],t_posy+40) .. [[\n]] .. indy_column(refiner2,2,column[c],t_posy) .. [[\n]] .. indy_column(refiner3,3,column[c],t_posy) .. [[\n]] .. indy_column(refiner4,4,column[c],t_posy) .. [[\n\nheader(\"Smelters\", ]].. t_posy ..[[, column[c], ]]..smelter_all..[[)\n]] .. indy_column(smelter1,1,column[c],t_posy+40) .. [[\n]] .. indy_column(smelter2,2,column[c],t_posy) .. [[\n]] .. indy_column(smelter3,3,column[c],t_posy) .. [[\n]] .. indy_column(smelter4,4,column[c],t_posy) .. [[\n]]  \n\nposy = 10\nt_posy = 10\nc=1\ncolumn = {10, 266, 522, 778}\n\nscreen_three = [[\nlocal layer = createLayer()\nlocal rx, ry = getResolution()\n\nlocal font = loadFont(\"Oxanium\", 12)\nlocal font3 = loadFont(\"RobotoCondensed\", 11)\n\ncolumn = {10, 266, 522, 778}\n\nsetDefaultFillColor(layer, Shape_Text, 0,0,1,1)\nsetDefaultStrokeColor(layer, Shape_Line, 0,.3,2,1)\nsetDefaultStrokeColor(layer, Shape_BoxRounded, 0,.3,2,1)\n\nsetNextFillColor(layer, 0,0,0,0)\nsetNextStrokeWidth(layer, 1)\naddBoxRounded(layer, 0, 0, rx, ry, 10)\n\nlocal div = rx/4\nlocal posy = 10\n\nlocal header = function(tag, y, p, n)\n    setNextFillColor(layer, 0,0,1,0.2)\n    setNextStrokeWidth(layer, .1)\n    addBoxRounded(layer, p, y, div - 20, 20, 4)\n    setNextTextAlign(layer, AlignH_Center, AlignV_Middle)\n    setNextFillColor(layer, 1,1,1,1)\n    addText(layer, font, \"(\" .. n .. \") \" .. tag, div/2+(p), y+11)    \nend\n\nfor x = 1,5 do addLine (layer, div*x, 0, div*x, ry) end\n\nlocal c = 1\n\nheader(\"Assembly Lines\", ]].. t_posy ..[[, column[c], ]]..assembly_all..[[)\n]] .. indy_column(assembly1,1,column[c],t_posy+40) .. [[\n]] .. indy_column(assembly2,2,column[c],t_posy) .. [[\n]] .. indy_column(assembly3,3,column[c],t_posy) .. [[\n]] .. indy_column(assembly4,4,column[c],t_posy) .. [[\n\n]]  \n\nscreens[1].activate()\nscreens[2].activate()\nscreens[3].activate()\n\nscreens[1].setRenderScript(screen_one)\nscreens[2].setRenderScript(screen_two)\nscreens[3].setRenderScript(screen_three)\n--screens[4].setRenderScript(screen_four)\n--screens[5].setRenderScript(screen_five)","filter":{"args":[{"value":"refresh"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"local T=text\n\nindy_type ={\"metalwork\",\"printer\",\"chemical\",\"glass\",\"refiner\",\"smelter\",\"assembler\", \"electronics\"}\n\n--local check=string.find(T,\"/help\")\n\n\nif string.find(T,\"help\") then\n system.print(\"--- Industry locator ---\")   \n system.print(\"Syntax:\")\n system.print(\"[machine_type] [tier] [number]\")\n system.print(\"ex: assembler t1 1\")\n system.print(\"possible machine types: metalwork, printer, chemical, glass, refiner, smelter, electronics, assembler\")\n system.print(\"to clear an arrow type: clear [index]\")\n system.print(\"ex: clear 18\")\n system.print(\"\")\n system.print(\"For assistance contact Bartas (game) or BartasRS#2742 (discord)\")    \n end\nif string.find(T,\"clear\") then\n    str = string.gsub(T, \"clear\" ,\"\")\n core_unit[1].deleteSticker(tonumber(str))\n end\n\nif string.find(T, indy_type[1]) then\n   str = string.gsub(T, indy_type[1],\"\")\n   \n       if string.find(str, \"t1\") then \n          str = string.gsub(str, \"t1\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(metalwork[1][iid])\n          --core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\")\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t2\") then \n          str = string.gsub(str, \"t2\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(metalwork[2][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t3\") then \n          str = string.gsub(str, \"t3\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(metalwork[3][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t4\") then \n          str = string.gsub(str, \"t4\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(metalwork[4][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n    \nelseif string.find(T, indy_type[2]) then\n   str = string.gsub(T, indy_type[2],\"\")\n   \n       if string.find(str, \"t1\") then \n          str = string.gsub(str, \"t1\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(printer[1][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t2\") then \n          str = string.gsub(str, \"t2\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(printer[2][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t3\") then \n          str = string.gsub(str, \"t3\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(printer[3][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t4\") then \n          str = string.gsub(str, \"t4\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(printer[4][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\nelseif string.find(T, indy_type[3]) then\n   str = string.gsub(T, indy_type[3],\"\")\n   \n       if string.find(str, \"t1\") then \n          str = string.gsub(str, \"t1\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(chemical[1][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\n          end\n        if string.find(str, \"t2\") then \n          str = string.gsub(str, \"t2\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(chemical[2][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\n          end\n        if string.find(str, \"t3\") then \n          str = string.gsub(str, \"t3\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(chemical[3][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\n          end\n        if string.find(str, \"t4\") then \n          str = string.gsub(str, \"t4\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(chemical[4][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\n          end\nelseif string.find(T, indy_type[4]) then\n   str = string.gsub(T, indy_type[4],\"\")\n   \n       if string.find(str, \"t1\") then \n          str = string.gsub(str, \"t1\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(glass[1][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\n          end\n        if string.find(str, \"t2\") then \n          str = string.gsub(str, \"t2\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(glass[2][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\n          end\n        if string.find(str, \"t3\") then \n          str = string.gsub(str, \"t3\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(glass[3][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\n          end\n        if string.find(str, \"t4\") then \n          str = string.gsub(str, \"t4\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(glass[4][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+6,\"down\"))\n          end     \nelseif string.find(T, indy_type[5]) then\n   str = string.gsub(T, indy_type[5],\"\")\n   \n       if string.find(str, \"t1\") then \n          str = string.gsub(str, \"t1\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(refiner[1][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t2\") then \n          str = string.gsub(str, \"t2\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(refiner[2][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t3\") then \n          str = string.gsub(str, \"t3\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(refiner[3][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t4\") then \n          str = string.gsub(str, \"t4\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(refiner[4][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\nelseif string.find(T, indy_type[6]) then\n   str = string.gsub(T, indy_type[6],\"\")\n   \n       if string.find(str, \"t1\") then \n          str = string.gsub(str, \"t1\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(smelter[1][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t2\") then \n          str = string.gsub(str, \"t2\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(smelter[2][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t3\") then \n          str = string.gsub(str, \"t3\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(smelter[3][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t4\") then \n          str = string.gsub(str, \"t4\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(smelter[4][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\nelseif string.find(T, indy_type[7]) then\n   str = string.gsub(T, indy_type[7],\"\")\n   \n       if string.find(str, \"t1\") then \n          str = string.gsub(str, \"t1\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(assembly[1][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t2\") then \n          str = string.gsub(str, \"t2\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(assembly[2][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t3\") then \n          str = string.gsub(str, \"t3\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(assembly[3][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t4\") then \n          str = string.gsub(str, \"t4\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(assembly[4][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\nelseif string.find(T, indy_type[8]) then\n   str = string.gsub(T, indy_type[8],\"\")\n   \n       if string.find(str, \"t1\") then \n          str = string.gsub(str, \"t1\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(electronics[1][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t2\") then \n          str = string.gsub(str, \"t2\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(electronics[2][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t3\") then \n          str = string.gsub(str, \"t3\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(electronics[3][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end\n        if string.find(str, \"t4\") then \n          str = string.gsub(str, \"t4\",\"\")\n          iid = tonumber(str)\n          c_pos = core_unit[1].getElementPositionById(electronics[4][iid])\n          system.print(\"Arrow added. Index : \" .. core_unit[1].spawnArrowSticker(c_pos[1],c_pos[2],c_pos[3]+4,\"down\"))\n          end    \nend\n ","filter":{"args":[{"variable":"*"}],"signature":"onInputText(text)","slotKey":"-4"},"key":"2"},{"code":"system.print(\" --- Factory Monitor Expanded v2.0 ---\")\nsystem.print (\"type 'help' for available commands\")\n\nscreens = {}\ncore_unit = {}\n--local json = require('dkjson')\n\nfor slot_name, slot in pairs(unit) do\n    if type(slot) == \"table\"\n        and type(slot.export) == \"table\"\n        and slot.getClass\n    then\n        slot.slotname = slot_name\n        \n        if slot.getClass():lower() == 'screenunit' then\n            table.insert(screens,slot)\n            \n         \n        --add space core recognition       \n        elseif slot.getClass():lower() == 'coreunitstatic' then\n            table.insert(core_unit,slot)\n        end\n    end\nend\n\nif #screens == 0 then\n    system.print(\"No screen detected\")\nelse\n    table.sort(screens, function(a,b) return a.slotname < b.slotname end)\n    local plural = \"\"\n    if #screens > 1 then plural = \"s\" end\n    system.print(#screens .. \" screen\" .. plural .. \" connected\")\nend\n\nif #core_unit == 0 then\n    system.print(\"No core detected\") else system.print(\"Core connected\")\nend\n\nelementIdList = core_unit[1].getElementIdList()\n\n\nmetalwork1 = {}\nmetalwork2 = {}\nmetalwork3 = {}\nmetalwork4 = {}\n\nelectronics1 = {}\nelectronics2 = {}\nelectronics3 = {}\nelectronics4 = {}\n\nglass1 = {}\nglass2 = {}\nglass3 = {}\nglass4 = {}\n\nprinter1 = {}\nprinter2 = {}\nprinter3 = {}\nprinter4 = {}\n\nchemical1 = {}\nchemical2 = {}\nchemical3 = {}\nchemical4 = {}\n\nrefiner1 = {}\nrefiner2 = {}\nrefiner3 = {}\nrefiner4 = {}\n\nsmelter1 = {}\nsmelter2 = {}\nsmelter3 = {}\nsmelter4 = {}\n\n-- Assembly Lines --\n\nassembly1 = {}\nassembly2 = {}\nassembly3 = {}\nassembly4 = {}\n \nmetalwork_count = {0,0,0,0}\nelectronics_count = {0,0,0,0}\nglass_count = {0,0,0,0}\nprinter_count = {0,0,0,0}\nchemical_count = {0,0,0,0}\nrefiner_count = {0,0,0,0}\nsmelter_count = {0,0,0,0}\nassembly_count = {0,0,0,0}\n\nfor index,id in ipairs(elementIdList) do\n    elementType = core_unit[1].getElementDisplayNameById(id):lower()\n    \n    if (elementType:find(\"metalwork industry\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(metalwork1,id)  metalwork_count[1] = metalwork_count[1] + 1        \n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(metalwork2,id)  metalwork_count[2] = metalwork_count[2] + 1 \n            elseif (elementType:find(\"advanced\")) then\n            table.insert(metalwork3,id) metalwork_count[3] = metalwork_count[3] + 1\n            elseif (elementType:find(\"rare\")) then\n            table.insert(metalwork4,id)  metalwork_count[4] = metalwork_count[4] + 1\n            end\n    end\n    if (elementType:find(\"electronics industry\")) then\n            if (elementType:find(\"basic\")) then\n            table.insert(electronics1,id)  electronics_count[1] = electronics_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then\n            table.insert(electronics2,id)  electronics_count[2] = electronics_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then\n            table.insert(electronics3,id)  electronics_count[3] = electronics_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(electronics4,id)  electronics_count[4] = electronics_count[4] + 1\n            end\n    end \n    if (elementType:find(\"glass furnace\")) then\n            if (elementType:find(\"basic\")) then  \n            table.insert(glass1,id)  glass_count[1] = glass_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(glass2,id)  glass_count[2] = glass_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(glass3,id)  glass_count[3] = glass_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(glass4,id)  glass_count[4] = glass_count[4] + 1\n            end\n    end \n    if (elementType:find(\"3d printer\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(printer1,id)  printer_count[1] = printer_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(printer2,id)  printer_count[2] = printer_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(printer3,id)  printer_count[3] = printer_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(printer4,id)  printer_count[4] = printer_count[4] + 1\n            end\n    end\n    if (elementType:find(\"chemical industry\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(chemical1,id)  chemical_count[1] = chemical_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(chemical2,id)  chemical_count[2] = chemical_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(chemical3,id)  chemical_count[3] = chemical_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(chemical4,id)  chemical_count[4] = chemical_count[4] + 1\n            end\n    end\n    if (elementType:find(\"refiner\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(refiner1,id)  refiner_count[1] = refiner_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(refiner2,id)  refiner_count[2] = refiner_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(refiner3,id)  refiner_count[3] = refiner_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(refiner4,id)  refiner_count[4] = refiner_count[4] + 1\n            end\n    end\n    if (elementType:find(\"smelter\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(smelter1,id)  smelter_count[1] = smelter_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(smelter2,id)  smelter_count[2] = smelter_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(smelter3,id)  smelter_count[3] = smelter_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(smelter4,id)  smelter_count[4] = smelter_count[4] + 1\n            end\n    end\n    if (elementType:find(\"assembly line\")) then\n            if (elementType:find(\"basic\")) then \n            table.insert(assembly1,id)  assembly_count[1] = assembly_count[1] + 1\n            elseif (elementType:find(\"uncommon\")) then \n            table.insert(assembly2,id)  assembly_count[2] = assembly_count[2] + 1\n            elseif (elementType:find(\"advanced\")) then \n            table.insert(assembly3,id)  assembly_count[3] = assembly_count[3] + 1\n            elseif (elementType:find(\"rare\")) then \n            table.insert(assembly4,id)  assembly_count[4] = assembly_count[4] + 1\n            end\n    end\n end\n\n\n\nmetalwork_all = metalwork_count[1] + metalwork_count[2] + metalwork_count[3] + metalwork_count[4]\nelectronics_all = electronics_count[1] + electronics_count[2] + electronics_count[3] + electronics_count[4]\nglass_all = glass_count[1] + glass_count[2] + glass_count[3] + glass_count[4]\nprinter_all = printer_count[1] + printer_count[2] + printer_count[3] + printer_count[4]\nchemical_all = chemical_count[1] + chemical_count[2] + chemical_count[3] + chemical_count[4]\nrefiner_all = refiner_count[1] + refiner_count[2] + refiner_count[3] + refiner_count[4]\nsmelter_all = smelter_count[1] + smelter_count[2] + smelter_count[3] + smelter_count[4]\nassembly_all = assembly_count[1] + assembly_count[2] + assembly_count[3] + assembly_count[4]\nall_count = metalwork_all + electronics_all + glass_all + printer_all + chemical_all + refiner_all + smelter_all + assembly_all\n\nif all_count > 265 then system.print(\"Crazy factory detected! You will need more than 1 screen!\") \n    else system.print(\"Factory not so big, you might want to use single screen script.\") end\n\nf_state = function(fid,F)\n    state = core_unit[1].getElementIndustryInfoById(fid)[\"state\"]\n    \n    if state == 1 and F == 0 then return \"Stopped\"\n        elseif state == 2 and F == 0 then \n        t = core_unit[1].getElementIndustryInfoById(fid)[\"currentProducts\"]\n        tt = string.gsub(system.getItem(t[1][\"id\"])[\"displayName\"], \"Advanced\",\"Adv.\")\n        tt = string.gsub(tt, \"Uncommon\",\"Unc.\")\n        tt = string.gsub(tt, \"product\",\"\")\n\n        return \"Running \" .. tt\n        elseif state == 3 and F == 0 then return \"Missing ingredient\"\n        elseif state == 4 and F == 0 then return \"Output full\"\n        elseif state == 5 and F == 0 then return \"No output container\"\n        elseif state == 6 and F == 0 then \n        t = core_unit[1].getElementIndustryInfoById(fid)[\"currentProducts\"]\n        tt = string.gsub(system.getItem(t[1][\"id\"])[\"displayName\"], \"Advanced\",\"Adv.\")\n        tt = string.gsub(tt, \"Uncommon\",\"Unc.\")\n        tt = string.gsub(tt, \"product\",\"\")\n        return \"Pending \" .. tt\n        elseif state == 7 and F == 0 then return \"Missing schematics\"\n        elseif state > 7 and F == 0 then return \"Error\"\n    end\n    if state == 1 and F == 1 then return \"setNextFillColor(layer,1,1,0,1)\"\n        elseif state == 2 and F == 1 then return \"setNextFillColor(layer,0,1,0,1) \"\n        elseif state == 3 and F == 1 then return \"setNextFillColor(layer,1,0,0.8,1) \"\n        elseif state == 4 and F == 1 then return \"setNextFillColor(layer,1,0.5,0,1) \"\n        elseif state == 5 and F == 1 then return \"setNextFillColor(layer,1,0,0,1) \"\n        elseif state == 6 and F == 1 then return \"setNextFillColor(layer,0,0.5,1,1) \"\n        elseif state == 7 and F == 1 then return \"setNextFillColor(layer,1,0,0,1) \"\n        else return \"\"\n    end\nend\n\n\n        \n\n","filter":{"args":[],"signature":"onStart()","slotKey":"-5"},"key":"3"}],"methods":[],"events":[]}
